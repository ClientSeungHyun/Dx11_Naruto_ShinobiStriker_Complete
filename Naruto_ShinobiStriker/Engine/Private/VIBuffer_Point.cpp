#include "VIBuffer_Point.h"

CVIBuffer_Point::CVIBuffer_Point(ID3D11Device* pDevice, ID3D11DeviceContext* pContext)
	: CVIBuffer{ pDevice, pContext }
{
	m_eComponentType = VIBUFFER_RECT;
}

CVIBuffer_Point::CVIBuffer_Point(const CVIBuffer_Point& Prototype)
	: CVIBuffer{ Prototype }
{
	m_eComponentType = VIBUFFER_RECT;
}

HRESULT CVIBuffer_Point::Initialize_Prototype()
{
	m_iNumVertexBuffers = 1;				// 버텍스 버퍼가 몇 개야?
	m_iNumVertices = 1;						// 정점을 몇 개 쓸거야?
	m_iVertexStride = sizeof(VTXPOINT);	// 정점 하나의 크기가 몇이야?
	m_iNumIndices = 1;						// 인덱스가 몇 개야?
	m_iIndexStride = 2;						// 인덱스 하나의 크기는? - 2 or 4
	m_eIndexFormat = DXGI_FORMAT_R16_UINT;	// 인덱스 포맷은? - 지금은 2니까 16비트 쓴다는거임 16비트 == 2바이트
	m_eTopology = D3D11_PRIMITIVE_TOPOLOGY_POINTLIST;	// 정점들 어떻게 연결할건지

	// 정점들의 위치를 저장해주기 위함
	m_pVerticesPos = new _float3[m_iNumVertices];

#pragma region VERTEX_BUFFER

	ZeroMemory(&m_BufferDesc, sizeof m_BufferDesc);
	m_BufferDesc.ByteWidth = m_iVertexStride * m_iNumVertices;	// 크기 설정 정점 크기 * 정점 개수
	m_BufferDesc.Usage = D3D11_USAGE_DEFAULT;	
	m_BufferDesc.BindFlags = D3D11_BIND_VERTEX_BUFFER;			// 지금은 버텍스 버퍼 정보임
	m_BufferDesc.CPUAccessFlags = 0;							// CPU 접근 허가 안 할거임
	m_BufferDesc.MiscFlags = 0;									// 보통 사용하지 않음 0
	m_BufferDesc.StructureByteStride = m_iVertexStride;			// 정점 크기

	/* 정점버퍼에 채워줄 값들을 만들기위해서 임시적으로 공간을 할당한다. */
	VTXPOINT*		pVertices = new VTXPOINT;
	ZeroMemory(pVertices, sizeof(VTXPOINT));

	pVertices[0].vPosition = m_pVerticesPos[0] = _float3(0.f, 0.f, 0.f);
	pVertices->vPSize = _float2(1.f, 1.f);

	ZeroMemory(&m_InitialData, sizeof m_InitialData);
	m_InitialData.pSysMem = pVertices;

	/* 정점버퍼를 생성한다. */
	if (FAILED(__super::Create_Buffer(&m_pVB)))
		return E_FAIL;

	Safe_Delete_Array(pVertices);

#pragma endregion

#pragma region INDEX_BUFFER

	ZeroMemory(&m_BufferDesc, sizeof m_BufferDesc);
	m_BufferDesc.ByteWidth = m_iIndexStride * m_iNumIndices;
	m_BufferDesc.Usage = D3D11_USAGE_DEFAULT; /* 정적버퍼로 생성한다. */
	m_BufferDesc.BindFlags = D3D11_BIND_INDEX_BUFFER;
	m_BufferDesc.CPUAccessFlags = 0;
	m_BufferDesc.MiscFlags = 0;
	m_BufferDesc.StructureByteStride = m_iIndexStride;

	_ushort* pIndices = new _ushort[m_iNumIndices];
	ZeroMemory(pIndices, sizeof(_ushort) * m_iNumIndices); // 이미 0이 들어가있음

	ZeroMemory(&m_InitialData, sizeof m_InitialData);
	m_InitialData.pSysMem = pIndices;

	/* 인덱스버퍼를 생성한다. */
	if (FAILED(__super::Create_Buffer(&m_pIB)))
		return E_FAIL;

	Safe_Delete_Array(pIndices);

#pragma endregion


	return S_OK;
}


HRESULT CVIBuffer_Point::Initialize(void* pArg)
{
	return S_OK;
}

CVIBuffer_Point* CVIBuffer_Point::Create(ID3D11Device* pDevice, ID3D11DeviceContext* pContext)
{
	CVIBuffer_Point* pInstance = new CVIBuffer_Point(pDevice, pContext);

	if (FAILED(pInstance->Initialize_Prototype()))
	{
		MSG_BOX(TEXT("Failed to Created : CVIBuffer_Point"));
		Safe_Release(pInstance);
	}

	return pInstance;
}

CComponent* CVIBuffer_Point::Clone(void* pArg)
{
	CVIBuffer_Point* pInstance = new CVIBuffer_Point(*this);

	if (FAILED(pInstance->Initialize(pArg)))
	{
		MSG_BOX(TEXT("Failed to Cloned : CVIBuffer_Point"));
		Safe_Release(pInstance);
	}

	return pInstance;
}

void CVIBuffer_Point::Free()
{
	__super::Free();

}
